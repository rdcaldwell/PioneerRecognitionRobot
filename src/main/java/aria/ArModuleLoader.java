/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package aria;

public class ArModuleLoader {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ArModuleLoader(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArModuleLoader obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArModuleLoader(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static Status load(String modName, ArRobot robot, SWIGTYPE_p_void modArgument, boolean quiet) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_load__SWIG_0(modName, ArRobot.getCPtr(robot), robot, SWIGTYPE_p_void.getCPtr(modArgument), quiet));
  }

  public static Status load(String modName, ArRobot robot, SWIGTYPE_p_void modArgument) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_load__SWIG_1(modName, ArRobot.getCPtr(robot), robot, SWIGTYPE_p_void.getCPtr(modArgument)));
  }

  public static Status load(String modName, ArRobot robot) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_load__SWIG_2(modName, ArRobot.getCPtr(robot), robot));
  }

  public static Status reload(String modName, ArRobot robot, SWIGTYPE_p_void modArgument, boolean quiet) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_reload__SWIG_0(modName, ArRobot.getCPtr(robot), robot, SWIGTYPE_p_void.getCPtr(modArgument), quiet));
  }

  public static Status reload(String modName, ArRobot robot, SWIGTYPE_p_void modArgument) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_reload__SWIG_1(modName, ArRobot.getCPtr(robot), robot, SWIGTYPE_p_void.getCPtr(modArgument)));
  }

  public static Status reload(String modName, ArRobot robot) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_reload__SWIG_2(modName, ArRobot.getCPtr(robot), robot));
  }

  public static Status close(String modName, boolean quiet) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_close__SWIG_0(modName, quiet));
  }

  public static Status close(String modName) {
    return Status.swigToEnum(AriaJavaJNI.ArModuleLoader_close__SWIG_1(modName));
  }

  public static void closeAll() {
    AriaJavaJNI.ArModuleLoader_closeAll();
  }

  public ArModuleLoader() {
    this(AriaJavaJNI.new_ArModuleLoader(), true);
  }

  public final static class Status {
    public final static Status STATUS_SUCCESS = new Status("STATUS_SUCCESS", AriaJavaJNI.ArModuleLoader_STATUS_SUCCESS_get());
    public final static Status STATUS_ALREADY_LOADED = new Status("STATUS_ALREADY_LOADED");
    public final static Status STATUS_FAILED_OPEN = new Status("STATUS_FAILED_OPEN");
    public final static Status STATUS_INVALID = new Status("STATUS_INVALID");
    public final static Status STATUS_INIT_FAILED = new Status("STATUS_INIT_FAILED");
    public final static Status STATUS_EXIT_FAILED = new Status("STATUS_EXIT_FAILED");
    public final static Status STATUS_NOT_FOUND = new Status("STATUS_NOT_FOUND");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Status swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Status.class + " with value " + swigValue);
    }

    private Status(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Status(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Status(String swigName, Status swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Status[] swigValues = { STATUS_SUCCESS, STATUS_ALREADY_LOADED, STATUS_FAILED_OPEN, STATUS_INVALID, STATUS_INIT_FAILED, STATUS_EXIT_FAILED, STATUS_NOT_FOUND };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
