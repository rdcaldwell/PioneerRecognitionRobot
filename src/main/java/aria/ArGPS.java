/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package aria;

public class ArGPS {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ArGPS(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArGPS obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArGPS(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArGPS() {
    this(AriaJavaJNI.new_ArGPS(), true);
  }

  public void setDeviceConnection(ArDeviceConnection deviceConn) {
    AriaJavaJNI.ArGPS_setDeviceConnection(swigCPtr, this, ArDeviceConnection.getCPtr(deviceConn), deviceConn);
  }

  public ArDeviceConnection getDeviceConnection() {
    long cPtr = AriaJavaJNI.ArGPS_getDeviceConnection(swigCPtr, this);
    return (cPtr == 0) ? null : new ArDeviceConnection(cPtr, false);
  }

  public boolean connect(long connectTimeout) {
    return AriaJavaJNI.ArGPS_connect__SWIG_0(swigCPtr, this, connectTimeout);
  }

  public boolean connect() {
    return AriaJavaJNI.ArGPS_connect__SWIG_1(swigCPtr, this);
  }

  public boolean blockingConnect(long connectTimeout) {
    return AriaJavaJNI.ArGPS_blockingConnect__SWIG_0(swigCPtr, this, connectTimeout);
  }

  public boolean blockingConnect() {
    return AriaJavaJNI.ArGPS_blockingConnect__SWIG_1(swigCPtr, this);
  }

  public void setReadFlags(int value) {
    AriaJavaJNI.ArGPS_ReadFlags_set(swigCPtr, this, value);
  }

  public int getReadFlags() {
    return AriaJavaJNI.ArGPS_ReadFlags_get(swigCPtr, this);
  }

  public int read(long maxTime) {
    return AriaJavaJNI.ArGPS_read__SWIG_0(swigCPtr, this, maxTime);
  }

  public int read() {
    return AriaJavaJNI.ArGPS_read__SWIG_1(swigCPtr, this);
  }

  public int readWithLock(long maxTime) {
    return AriaJavaJNI.ArGPS_readWithLock(swigCPtr, this, maxTime);
  }

  public void lock() {
    AriaJavaJNI.ArGPS_lock(swigCPtr, this);
  }

  public void unlock() {
    AriaJavaJNI.ArGPS_unlock(swigCPtr, this);
  }

  public void setIgnoreChecksum(boolean ignore) {
    AriaJavaJNI.ArGPS_setIgnoreChecksum(swigCPtr, this, ignore);
  }

  public void logData() {
    AriaJavaJNI.ArGPS_logData(swigCPtr, this);
  }

  public void printData(boolean labels) {
    AriaJavaJNI.ArGPS_printData__SWIG_0(swigCPtr, this, labels);
  }

  public void printData() {
    AriaJavaJNI.ArGPS_printData__SWIG_1(swigCPtr, this);
  }

  public void printDataLabelsHeader() {
    AriaJavaJNI.ArGPS_printDataLabelsHeader(swigCPtr, this);
  }

  static public class Data {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    public Data(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    public static long getCPtr(Data obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AriaJavaJNI.delete_ArGPS_Data(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public Data() {
      this(AriaJavaJNI.new_ArGPS_Data(), true);
    }
  
    public void setLatitude(double value) {
      AriaJavaJNI.ArGPS_Data_latitude_set(swigCPtr, this, value);
    }
  
    public double getLatitude() {
      return AriaJavaJNI.ArGPS_Data_latitude_get(swigCPtr, this);
    }
  
    public void setLongitude(double value) {
      AriaJavaJNI.ArGPS_Data_longitude_set(swigCPtr, this, value);
    }
  
    public double getLongitude() {
      return AriaJavaJNI.ArGPS_Data_longitude_get(swigCPtr, this);
    }
  
    public void setHavePosition(boolean value) {
      AriaJavaJNI.ArGPS_Data_havePosition_set(swigCPtr, this, value);
    }
  
    public boolean getHavePosition() {
      return AriaJavaJNI.ArGPS_Data_havePosition_get(swigCPtr, this);
    }
  
    public void setTimeGotPosition(ArTime value) {
      AriaJavaJNI.ArGPS_Data_timeGotPosition_set(swigCPtr, this, ArTime.getCPtr(value), value);
    }
  
    public ArTime getTimeGotPosition() {
      long cPtr = AriaJavaJNI.ArGPS_Data_timeGotPosition_get(swigCPtr, this);
      return (cPtr == 0) ? null : new ArTime(cPtr, false);
    }
  
    public void setSpeed(double value) {
      AriaJavaJNI.ArGPS_Data_speed_set(swigCPtr, this, value);
    }
  
    public double getSpeed() {
      return AriaJavaJNI.ArGPS_Data_speed_get(swigCPtr, this);
    }
  
    public void setHaveSpeed(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveSpeed_set(swigCPtr, this, value);
    }
  
    public boolean getHaveSpeed() {
      return AriaJavaJNI.ArGPS_Data_haveSpeed_get(swigCPtr, this);
    }
  
    public void setGPSPositionTimestamp(ArTime value) {
      AriaJavaJNI.ArGPS_Data_GPSPositionTimestamp_set(swigCPtr, this, ArTime.getCPtr(value), value);
    }
  
    public ArTime getGPSPositionTimestamp() {
      long cPtr = AriaJavaJNI.ArGPS_Data_GPSPositionTimestamp_get(swigCPtr, this);
      return (cPtr == 0) ? null : new ArTime(cPtr, false);
    }
  
    public void setFixType(FixType value) {
      AriaJavaJNI.ArGPS_Data_fixType_set(swigCPtr, this, value.swigValue());
    }
  
    public FixType getFixType() {
      return FixType.swigToEnum(AriaJavaJNI.ArGPS_Data_fixType_get(swigCPtr, this));
    }
  
    public void setNumSatellitesTracked(int value) {
      AriaJavaJNI.ArGPS_Data_numSatellitesTracked_set(swigCPtr, this, value);
    }
  
    public int getNumSatellitesTracked() {
      return AriaJavaJNI.ArGPS_Data_numSatellitesTracked_get(swigCPtr, this);
    }
  
    public void setAltitude(double value) {
      AriaJavaJNI.ArGPS_Data_altitude_set(swigCPtr, this, value);
    }
  
    public double getAltitude() {
      return AriaJavaJNI.ArGPS_Data_altitude_get(swigCPtr, this);
    }
  
    public void setHaveAltitude(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveAltitude_set(swigCPtr, this, value);
    }
  
    public boolean getHaveAltitude() {
      return AriaJavaJNI.ArGPS_Data_haveAltitude_get(swigCPtr, this);
    }
  
    public void setAltimeter(double value) {
      AriaJavaJNI.ArGPS_Data_altimeter_set(swigCPtr, this, value);
    }
  
    public double getAltimeter() {
      return AriaJavaJNI.ArGPS_Data_altimeter_get(swigCPtr, this);
    }
  
    public void setHaveAltimeter(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveAltimeter_set(swigCPtr, this, value);
    }
  
    public boolean getHaveAltimeter() {
      return AriaJavaJNI.ArGPS_Data_haveAltimeter_get(swigCPtr, this);
    }
  
    public void setDGPSStationID(int value) {
      AriaJavaJNI.ArGPS_Data_DGPSStationID_set(swigCPtr, this, value);
    }
  
    public int getDGPSStationID() {
      return AriaJavaJNI.ArGPS_Data_DGPSStationID_get(swigCPtr, this);
    }
  
    public void setHaveDGPSStation(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveDGPSStation_set(swigCPtr, this, value);
    }
  
    public boolean getHaveDGPSStation() {
      return AriaJavaJNI.ArGPS_Data_haveDGPSStation_get(swigCPtr, this);
    }
  
    public void setGarminPositionError(double value) {
      AriaJavaJNI.ArGPS_Data_garminPositionError_set(swigCPtr, this, value);
    }
  
    public double getGarminPositionError() {
      return AriaJavaJNI.ArGPS_Data_garminPositionError_get(swigCPtr, this);
    }
  
    public void setHaveGarminPositionError(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveGarminPositionError_set(swigCPtr, this, value);
    }
  
    public boolean getHaveGarminPositionError() {
      return AriaJavaJNI.ArGPS_Data_haveGarminPositionError_get(swigCPtr, this);
    }
  
    public void setGarminVerticalPositionError(double value) {
      AriaJavaJNI.ArGPS_Data_garminVerticalPositionError_set(swigCPtr, this, value);
    }
  
    public double getGarminVerticalPositionError() {
      return AriaJavaJNI.ArGPS_Data_garminVerticalPositionError_get(swigCPtr, this);
    }
  
    public void setHaveGarminVerticalPositionError(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveGarminVerticalPositionError_set(swigCPtr, this, value);
    }
  
    public boolean getHaveGarminVerticalPositionError() {
      return AriaJavaJNI.ArGPS_Data_haveGarminVerticalPositionError_get(swigCPtr, this);
    }
  
    public void setCompassHeadingMag(double value) {
      AriaJavaJNI.ArGPS_Data_compassHeadingMag_set(swigCPtr, this, value);
    }
  
    public double getCompassHeadingMag() {
      return AriaJavaJNI.ArGPS_Data_compassHeadingMag_get(swigCPtr, this);
    }
  
    public void setCompassHeadingTrue(double value) {
      AriaJavaJNI.ArGPS_Data_compassHeadingTrue_set(swigCPtr, this, value);
    }
  
    public double getCompassHeadingTrue() {
      return AriaJavaJNI.ArGPS_Data_compassHeadingTrue_get(swigCPtr, this);
    }
  
    public void setHaveCompassHeadingMag(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveCompassHeadingMag_set(swigCPtr, this, value);
    }
  
    public boolean getHaveCompassHeadingMag() {
      return AriaJavaJNI.ArGPS_Data_haveCompassHeadingMag_get(swigCPtr, this);
    }
  
    public void setHaveCompassHeadingTrue(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveCompassHeadingTrue_set(swigCPtr, this, value);
    }
  
    public boolean getHaveCompassHeadingTrue() {
      return AriaJavaJNI.ArGPS_Data_haveCompassHeadingTrue_get(swigCPtr, this);
    }
  
    public void setCompassMagCounter(long value) {
      AriaJavaJNI.ArGPS_Data_compassMagCounter_set(swigCPtr, this, value);
    }
  
    public long getCompassMagCounter() {
      return AriaJavaJNI.ArGPS_Data_compassMagCounter_get(swigCPtr, this);
    }
  
    public void setCompassTrueCounter(long value) {
      AriaJavaJNI.ArGPS_Data_compassTrueCounter_set(swigCPtr, this, value);
    }
  
    public long getCompassTrueCounter() {
      return AriaJavaJNI.ArGPS_Data_compassTrueCounter_get(swigCPtr, this);
    }
  
    public void setHaveHDOP(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveHDOP_set(swigCPtr, this, value);
    }
  
    public boolean getHaveHDOP() {
      return AriaJavaJNI.ArGPS_Data_haveHDOP_get(swigCPtr, this);
    }
  
    public void setHDOP(double value) {
      AriaJavaJNI.ArGPS_Data_HDOP_set(swigCPtr, this, value);
    }
  
    public double getHDOP() {
      return AriaJavaJNI.ArGPS_Data_HDOP_get(swigCPtr, this);
    }
  
    public void setHaveVDOP(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveVDOP_set(swigCPtr, this, value);
    }
  
    public boolean getHaveVDOP() {
      return AriaJavaJNI.ArGPS_Data_haveVDOP_get(swigCPtr, this);
    }
  
    public void setVDOP(double value) {
      AriaJavaJNI.ArGPS_Data_VDOP_set(swigCPtr, this, value);
    }
  
    public double getVDOP() {
      return AriaJavaJNI.ArGPS_Data_VDOP_get(swigCPtr, this);
    }
  
    public void setHavePDOP(boolean value) {
      AriaJavaJNI.ArGPS_Data_havePDOP_set(swigCPtr, this, value);
    }
  
    public boolean getHavePDOP() {
      return AriaJavaJNI.ArGPS_Data_havePDOP_get(swigCPtr, this);
    }
  
    public void setPDOP(double value) {
      AriaJavaJNI.ArGPS_Data_PDOP_set(swigCPtr, this, value);
    }
  
    public double getPDOP() {
      return AriaJavaJNI.ArGPS_Data_PDOP_get(swigCPtr, this);
    }
  
    public void setQualityFlag(boolean value) {
      AriaJavaJNI.ArGPS_Data_qualityFlag_set(swigCPtr, this, value);
    }
  
    public boolean getQualityFlag() {
      return AriaJavaJNI.ArGPS_Data_qualityFlag_get(swigCPtr, this);
    }
  
    public void setMeanSNR(double value) {
      AriaJavaJNI.ArGPS_Data_meanSNR_set(swigCPtr, this, value);
    }
  
    public double getMeanSNR() {
      return AriaJavaJNI.ArGPS_Data_meanSNR_get(swigCPtr, this);
    }
  
    public void setHaveSNR(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveSNR_set(swigCPtr, this, value);
    }
  
    public boolean getHaveSNR() {
      return AriaJavaJNI.ArGPS_Data_haveSNR_get(swigCPtr, this);
    }
  
    public void setBeaconSignalStrength(double value) {
      AriaJavaJNI.ArGPS_Data_beaconSignalStrength_set(swigCPtr, this, value);
    }
  
    public double getBeaconSignalStrength() {
      return AriaJavaJNI.ArGPS_Data_beaconSignalStrength_get(swigCPtr, this);
    }
  
    public void setBeaconSNR(double value) {
      AriaJavaJNI.ArGPS_Data_beaconSNR_set(swigCPtr, this, value);
    }
  
    public double getBeaconSNR() {
      return AriaJavaJNI.ArGPS_Data_beaconSNR_get(swigCPtr, this);
    }
  
    public void setBeaconFreq(double value) {
      AriaJavaJNI.ArGPS_Data_beaconFreq_set(swigCPtr, this, value);
    }
  
    public double getBeaconFreq() {
      return AriaJavaJNI.ArGPS_Data_beaconFreq_get(swigCPtr, this);
    }
  
    public void setBeaconBPS(int value) {
      AriaJavaJNI.ArGPS_Data_beaconBPS_set(swigCPtr, this, value);
    }
  
    public int getBeaconBPS() {
      return AriaJavaJNI.ArGPS_Data_beaconBPS_get(swigCPtr, this);
    }
  
    public void setBeaconChannel(int value) {
      AriaJavaJNI.ArGPS_Data_beaconChannel_set(swigCPtr, this, value);
    }
  
    public int getBeaconChannel() {
      return AriaJavaJNI.ArGPS_Data_beaconChannel_get(swigCPtr, this);
    }
  
    public void setHaveBeaconInfo(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveBeaconInfo_set(swigCPtr, this, value);
    }
  
    public boolean getHaveBeaconInfo() {
      return AriaJavaJNI.ArGPS_Data_haveBeaconInfo_get(swigCPtr, this);
    }
  
    public void setInputsRMS(double value) {
      AriaJavaJNI.ArGPS_Data_inputsRMS_set(swigCPtr, this, value);
    }
  
    public double getInputsRMS() {
      return AriaJavaJNI.ArGPS_Data_inputsRMS_get(swigCPtr, this);
    }
  
    public void setHaveInputsRMS(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveInputsRMS_set(swigCPtr, this, value);
    }
  
    public boolean getHaveInputsRMS() {
      return AriaJavaJNI.ArGPS_Data_haveInputsRMS_get(swigCPtr, this);
    }
  
    public void setErrorEllipse(ArPose value) {
      AriaJavaJNI.ArGPS_Data_errorEllipse_set(swigCPtr, this, ArPose.getCPtr(value), value);
    }
  
    public ArPose getErrorEllipse() {
      long cPtr = AriaJavaJNI.ArGPS_Data_errorEllipse_get(swigCPtr, this);
      return (cPtr == 0) ? null : new ArPose(cPtr, false);
    }
  
    public void setHaveErrorEllipse(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveErrorEllipse_set(swigCPtr, this, value);
    }
  
    public boolean getHaveErrorEllipse() {
      return AriaJavaJNI.ArGPS_Data_haveErrorEllipse_get(swigCPtr, this);
    }
  
    public void setLatLonError(ArPose value) {
      AriaJavaJNI.ArGPS_Data_latLonError_set(swigCPtr, this, ArPose.getCPtr(value), value);
    }
  
    public ArPose getLatLonError() {
      long cPtr = AriaJavaJNI.ArGPS_Data_latLonError_get(swigCPtr, this);
      return (cPtr == 0) ? null : new ArPose(cPtr, false);
    }
  
    public void setHaveLatLonError(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveLatLonError_set(swigCPtr, this, value);
    }
  
    public boolean getHaveLatLonError() {
      return AriaJavaJNI.ArGPS_Data_haveLatLonError_get(swigCPtr, this);
    }
  
    public void setAltitudeError(double value) {
      AriaJavaJNI.ArGPS_Data_altitudeError_set(swigCPtr, this, value);
    }
  
    public double getAltitudeError() {
      return AriaJavaJNI.ArGPS_Data_altitudeError_get(swigCPtr, this);
    }
  
    public void setHaveAltitudeError(boolean value) {
      AriaJavaJNI.ArGPS_Data_haveAltitudeError_set(swigCPtr, this, value);
    }
  
    public boolean getHaveAltitudeError() {
      return AriaJavaJNI.ArGPS_Data_haveAltitudeError_get(swigCPtr, this);
    }
  
  }

  public Data getCurrentDataRef() {
    return new Data(AriaJavaJNI.ArGPS_getCurrentDataRef(swigCPtr, this), false);
  }

  public FixType getFixType() {
    return FixType.swigToEnum(AriaJavaJNI.ArGPS_getFixType(swigCPtr, this));
  }

  public String getFixTypeName() {
    return AriaJavaJNI.ArGPS_getFixTypeName__SWIG_0(swigCPtr, this);
  }

  public static String getFixTypeName(FixType type) {
    return AriaJavaJNI.ArGPS_getFixTypeName__SWIG_1(type.swigValue());
  }

  public boolean havePosition() {
    return AriaJavaJNI.ArGPS_havePosition(swigCPtr, this);
  }

  public boolean haveLatitude() {
    return AriaJavaJNI.ArGPS_haveLatitude(swigCPtr, this);
  }

  public boolean haveLongitude() {
    return AriaJavaJNI.ArGPS_haveLongitude(swigCPtr, this);
  }

  public double getLatitude() {
    return AriaJavaJNI.ArGPS_getLatitude(swigCPtr, this);
  }

  public double getLongitude() {
    return AriaJavaJNI.ArGPS_getLongitude(swigCPtr, this);
  }

  public ArLLACoords getLLA() {
    return new ArLLACoords(AriaJavaJNI.ArGPS_getLLA(swigCPtr, this), true);
  }

  public ArPose getAsPose() {
    return new ArPose(AriaJavaJNI.ArGPS_getAsPose(swigCPtr, this), true);
  }

  public ArTime getTimeReceivedPosition() {
    return new ArTime(AriaJavaJNI.ArGPS_getTimeReceivedPosition(swigCPtr, this), true);
  }

  public boolean haveSpeed() {
    return AriaJavaJNI.ArGPS_haveSpeed(swigCPtr, this);
  }

  public double getSpeed() {
    return AriaJavaJNI.ArGPS_getSpeed(swigCPtr, this);
  }

  public ArTime getGPSPositionTimestamp() {
    return new ArTime(AriaJavaJNI.ArGPS_getGPSPositionTimestamp(swigCPtr, this), true);
  }

  public int getNumSatellitesTracked() {
    return AriaJavaJNI.ArGPS_getNumSatellitesTracked(swigCPtr, this);
  }

  public boolean haveDGPSStation() {
    return AriaJavaJNI.ArGPS_haveDGPSStation(swigCPtr, this);
  }

  public int getDGPSStationID() {
    return AriaJavaJNI.ArGPS_getDGPSStationID(swigCPtr, this);
  }

  public boolean haveGarminPositionError() {
    return AriaJavaJNI.ArGPS_haveGarminPositionError(swigCPtr, this);
  }

  public double getGarminPositionError() {
    return AriaJavaJNI.ArGPS_getGarminPositionError(swigCPtr, this);
  }

  public boolean haveGarminVerticalPositionError() {
    return AriaJavaJNI.ArGPS_haveGarminVerticalPositionError(swigCPtr, this);
  }

  public double getGarminVerticalPositionError() {
    return AriaJavaJNI.ArGPS_getGarminVerticalPositionError(swigCPtr, this);
  }

  public boolean haveCompassHeadingMag() {
    return AriaJavaJNI.ArGPS_haveCompassHeadingMag(swigCPtr, this);
  }

  public boolean haveCompassHeadingTrue() {
    return AriaJavaJNI.ArGPS_haveCompassHeadingTrue(swigCPtr, this);
  }

  public double getCompassHeadingMag() {
    return AriaJavaJNI.ArGPS_getCompassHeadingMag(swigCPtr, this);
  }

  public double getCompassHeadingTrue() {
    return AriaJavaJNI.ArGPS_getCompassHeadingTrue(swigCPtr, this);
  }

  public void setCompassHeadingMag(double val) {
    AriaJavaJNI.ArGPS_setCompassHeadingMag(swigCPtr, this, val);
  }

  public void setCompassHeadingTrue(double val) {
    AriaJavaJNI.ArGPS_setCompassHeadingTrue(swigCPtr, this, val);
  }

  public void setCompassHeadingMagWithLock(double val) {
    AriaJavaJNI.ArGPS_setCompassHeadingMagWithLock(swigCPtr, this, val);
  }

  public void setCompassHeadingTrueWithLock(double val) {
    AriaJavaJNI.ArGPS_setCompassHeadingTrueWithLock(swigCPtr, this, val);
  }

  public boolean haveAltitude() {
    return AriaJavaJNI.ArGPS_haveAltitude(swigCPtr, this);
  }

  public double getAltitude() {
    return AriaJavaJNI.ArGPS_getAltitude(swigCPtr, this);
  }

  public boolean haveAltimeter() {
    return AriaJavaJNI.ArGPS_haveAltimeter(swigCPtr, this);
  }

  public double getAltimeter() {
    return AriaJavaJNI.ArGPS_getAltimeter(swigCPtr, this);
  }

  public boolean haveHDOP() {
    return AriaJavaJNI.ArGPS_haveHDOP(swigCPtr, this);
  }

  public double getHDOP() {
    return AriaJavaJNI.ArGPS_getHDOP(swigCPtr, this);
  }

  public boolean haveVDOP() {
    return AriaJavaJNI.ArGPS_haveVDOP(swigCPtr, this);
  }

  public double getVDOP() {
    return AriaJavaJNI.ArGPS_getVDOP(swigCPtr, this);
  }

  public boolean havePDOP() {
    return AriaJavaJNI.ArGPS_havePDOP(swigCPtr, this);
  }

  public double getPDOP() {
    return AriaJavaJNI.ArGPS_getPDOP(swigCPtr, this);
  }

  public boolean haveSNR() {
    return AriaJavaJNI.ArGPS_haveSNR(swigCPtr, this);
  }

  public double getMeanSNR() {
    return AriaJavaJNI.ArGPS_getMeanSNR(swigCPtr, this);
  }

  public boolean haveBeaconInfo() {
    return AriaJavaJNI.ArGPS_haveBeaconInfo(swigCPtr, this);
  }

  public double getBeaconSignalStrength() {
    return AriaJavaJNI.ArGPS_getBeaconSignalStrength(swigCPtr, this);
  }

  public double getBeaconSNR() {
    return AriaJavaJNI.ArGPS_getBeaconSNR(swigCPtr, this);
  }

  public double getBeaconFreq() {
    return AriaJavaJNI.ArGPS_getBeaconFreq(swigCPtr, this);
  }

  public int getBecaonBPS() {
    return AriaJavaJNI.ArGPS_getBecaonBPS(swigCPtr, this);
  }

  public int getBeaconChannel() {
    return AriaJavaJNI.ArGPS_getBeaconChannel(swigCPtr, this);
  }

  public boolean haveErrorEllipse() {
    return AriaJavaJNI.ArGPS_haveErrorEllipse(swigCPtr, this);
  }

  public ArPose getErrorEllipse() {
    return new ArPose(AriaJavaJNI.ArGPS_getErrorEllipse(swigCPtr, this), true);
  }

  public boolean haveLatLonError() {
    return AriaJavaJNI.ArGPS_haveLatLonError(swigCPtr, this);
  }

  public ArPose getLatLonError() {
    return new ArPose(AriaJavaJNI.ArGPS_getLatLonError(swigCPtr, this), true);
  }

  public double getLatitudeError() {
    return AriaJavaJNI.ArGPS_getLatitudeError(swigCPtr, this);
  }

  public double getLongitudeError() {
    return AriaJavaJNI.ArGPS_getLongitudeError(swigCPtr, this);
  }

  public boolean haveAltitudeError() {
    return AriaJavaJNI.ArGPS_haveAltitudeError(swigCPtr, this);
  }

  public double getAltitudeError() {
    return AriaJavaJNI.ArGPS_getAltitudeError(swigCPtr, this);
  }

  public boolean haveInputsRMS() {
    return AriaJavaJNI.ArGPS_haveInputsRMS(swigCPtr, this);
  }

  public double getInputsRMS() {
    return AriaJavaJNI.ArGPS_getInputsRMS(swigCPtr, this);
  }

  public void addNMEAHandler(String message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t handler) {
    AriaJavaJNI.ArGPS_addNMEAHandler(swigCPtr, this, message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t.getCPtr(handler));
  }

  public void removeNMEAHandler(String message) {
    AriaJavaJNI.ArGPS_removeNMEAHandler(swigCPtr, this, message);
  }

  public void replaceNMEAHandler(String message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t handler) {
    AriaJavaJNI.ArGPS_replaceNMEAHandler(swigCPtr, this, message, SWIGTYPE_p_ArFunctor1T_ArNMEAParser__Message_t.getCPtr(handler));
  }

  public final static int ReadFinished = AriaJavaJNI.ArGPS_ReadFinished_get();
  public final static int ReadError = AriaJavaJNI.ArGPS_ReadError_get();
  public final static int ReadData = AriaJavaJNI.ArGPS_ReadData_get();
  public final static int ReadUpdated = AriaJavaJNI.ArGPS_ReadUpdated_get();

  public final static class FixType {
    public final static FixType NoFix = new FixType("NoFix");
    public final static FixType BadFix = new FixType("BadFix");
    public final static FixType GPSFix = new FixType("GPSFix");
    public final static FixType DGPSFix = new FixType("DGPSFix");
    public final static FixType PPSFix = new FixType("PPSFix");
    public final static FixType RTKinFix = new FixType("RTKinFix");
    public final static FixType FloatRTKinFix = new FixType("FloatRTKinFix");
    public final static FixType DeadReckFix = new FixType("DeadReckFix");
    public final static FixType ManualFix = new FixType("ManualFix");
    public final static FixType SimulatedFix = new FixType("SimulatedFix");
    public final static FixType UnknownFixType = new FixType("UnknownFixType");
    public final static FixType OmnistarConverging = new FixType("OmnistarConverging", AriaJavaJNI.ArGPS_OmnistarConverging_get());
    public final static FixType OmnistarConverged = new FixType("OmnistarConverged", AriaJavaJNI.ArGPS_OmnistarConverged_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static FixType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + FixType.class + " with value " + swigValue);
    }

    private FixType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private FixType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private FixType(String swigName, FixType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static FixType[] swigValues = { NoFix, BadFix, GPSFix, DGPSFix, PPSFix, RTKinFix, FloatRTKinFix, DeadReckFix, ManualFix, SimulatedFix, UnknownFixType, OmnistarConverging, OmnistarConverged };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
